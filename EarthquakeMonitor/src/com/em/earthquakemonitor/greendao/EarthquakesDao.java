package com.em.earthquakemonitor.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.em.earthquakemonitor.greendao.Earthquakes;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table EARTHQUAKES.
*/
public class EarthquakesDao extends AbstractDao<Earthquakes, Long> {

    public static final String TABLENAME = "EARTHQUAKES";

    /**
     * Properties of entity Earthquakes.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "Z_PK");
        public final static Property QId = new Property(1, String.class, "QId", false, "QID");
        public final static Property QPlace = new Property(2, String.class, "QPlace", false, "QPLACE");
        public final static Property QUrl = new Property(3, String.class, "QUrl", false, "QURL");
        public final static Property Qtitle = new Property(4, String.class, "Qtitle", false, "QTITLE");
        public final static Property QDetails = new Property(5, String.class, "QDetails", false, "QDETAILS");
        public final static Property QMagnitude = new Property(6, Double.class, "QMagnitude", false, "QMAGNITUDE");
        public final static Property QLatitude = new Property(7, Double.class, "QLatitude", false, "QLATITUDE");
        public final static Property QLongitude = new Property(8, Double.class, "QLongitude", false, "QLONGITUDE");
        public final static Property QDepth = new Property(9, Double.class, "QDepth", false, "QDEPTH");
        public final static Property QTime = new Property(10, Long.class, "QTime", false, "QTIME");
    };

    private DaoSession daoSession;


    public EarthquakesDao(DaoConfig config) {
        super(config);
    }
    
    public EarthquakesDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'EARTHQUAKES' (" + //
                "'Z_PK' INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "'QID' TEXT," + // 1: QId
                "'QPLACE' TEXT," + // 2: QPlace
                "'QURL' TEXT," + // 3: QUrl
                "'QTITLE' TEXT," + // 4: Qtitle
                "'QDETAILS' TEXT," + // 5: QDetails
                "'QMAGNITUDE' REAL," + // 6: QMagnitude
                "'QLATITUDE' REAL," + // 7: QLatitude
                "'QLONGITUDE' REAL," + // 8: QLongitude
                "'QDEPTH' REAL," + // 9: QDepth
                "'QTIME' INTEGER);"); // 10: QTime
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'EARTHQUAKES'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Earthquakes entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String QId = entity.getQId();
        if (QId != null) {
            stmt.bindString(2, QId);
        }
 
        String QPlace = entity.getQPlace();
        if (QPlace != null) {
            stmt.bindString(3, QPlace);
        }
 
        String QUrl = entity.getQUrl();
        if (QUrl != null) {
            stmt.bindString(4, QUrl);
        }
 
        String Qtitle = entity.getQtitle();
        if (Qtitle != null) {
            stmt.bindString(5, Qtitle);
        }
 
        String QDetails = entity.getQDetails();
        if (QDetails != null) {
            stmt.bindString(6, QDetails);
        }
 
        Double QMagnitude = entity.getQMagnitude();
        if (QMagnitude != null) {
            stmt.bindDouble(7, QMagnitude);
        }
 
        Double QLatitude = entity.getQLatitude();
        if (QLatitude != null) {
            stmt.bindDouble(8, QLatitude);
        }
 
        Double QLongitude = entity.getQLongitude();
        if (QLongitude != null) {
            stmt.bindDouble(9, QLongitude);
        }
 
        Double QDepth = entity.getQDepth();
        if (QDepth != null) {
            stmt.bindDouble(10, QDepth);
        }
 
        Long QTime = entity.getQTime();
        if (QTime != null) {
            stmt.bindLong(11, QTime);
        }
    }

    @Override
    protected void attachEntity(Earthquakes entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Earthquakes readEntity(Cursor cursor, int offset) {
        Earthquakes entity = new Earthquakes( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // QId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // QPlace
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // QUrl
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // Qtitle
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // QDetails
            cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6), // QMagnitude
            cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7), // QLatitude
            cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8), // QLongitude
            cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9), // QDepth
            cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10) // QTime
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Earthquakes entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setQId(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setQPlace(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQUrl(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setQtitle(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setQDetails(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setQMagnitude(cursor.isNull(offset + 6) ? null : cursor.getDouble(offset + 6));
        entity.setQLatitude(cursor.isNull(offset + 7) ? null : cursor.getDouble(offset + 7));
        entity.setQLongitude(cursor.isNull(offset + 8) ? null : cursor.getDouble(offset + 8));
        entity.setQDepth(cursor.isNull(offset + 9) ? null : cursor.getDouble(offset + 9));
        entity.setQTime(cursor.isNull(offset + 10) ? null : cursor.getLong(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Earthquakes entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Earthquakes entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
